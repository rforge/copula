##-*- org -*--> use Emacs to view this, and there the [Tab] key + [Org] menu
* DONE LICENCE etc
MM: Einstein's rule: Keep it as simple as possible (but not simpler)
All the Copyright headers in R/*.R  src/*.c etc need to be streamlined;
typically containing all 4 names.
MH: I can do that (once Ivan and Jun agree)
JY: I agree
=> MH: done on 2012-03-25 (for simplicity, I used "2012" everywhere)
* R/sysdata.rda: ouah!
MM, MH: Please tell us more about this,
notably about how it is computed {so it can be recomputed, in case
pspline changes ...}.
JY: Sorry for having to use this. The objects stored here are used to
return Kendall's tau and Spearman's rho and their inverse functions
for copulas for which explicit formulas are not available. We used
simulation over a grid of (possibly transformed) parameter values
and smoothed the results with pspline. Some details can be found
in the appendix of Kojadinovic and Yan (2010, IME). The R scripts
that generated sysdata.rda were moved out of the package source.
We can put them back. The best place is under inst?
=> JY: done on 2012-07-12. The R scripts are under inst/docs/tauRho/.
- Note taken on [2012-02-21 Tue 18:52]
**  R code for inspection:
 attach("~/R/Pkgs/copula/R/sysdata.rda")
 ls.str(pos=2, all=TRUE)
 ## or even
 print(ls.str(pos=2, all=TRUE), max.level = 3)

* copula code which is not used --- moved to ./misc/
MM: the previous file (+directory) names were:
    - R/mult.R
    - src/mult.c
    - src/mygsl_util.c
* Exporting a bit more of hidden internal functions:
** JY: Ivan, I think we should export an empCopula function. I always
thought it was unnecessary because it can be obtained with R package mecdf.
But people have asked for it.
** MM: Also, look at ./man/copula-internal.Rd :
*** e.g. schlatherCopula ??   JY: The implementation of schlatherCopula is not ready for release. More ev copulas will come from max-stable processes.
*** asymCopula (-class) -- document properly (incl some examples) mv from ./man/copula-internal.Rd

* C code
** DONE [src/init.c] enable registration for the old 'copula' part
** use 'static' "everywhere" +  attribute_hidden "otherwise"/sometimes
** Move  from .C() towards .Call() -- only very long term
JY: Agree. Quite a few them. Can it wait?  MM: Definitely; Actually, I
think it's not worth the effort; particularly now that I've spent all the
effort writing src/init.c for registration of all of the .C(..) routines.

** gsl - debye ===> Should use them and then *not* carry gsl-source code anymore.
JY: Agree.

** in all *.c files from former copula: use Doxygen instead of hand made function header documentation.
MH: I can also work on that (but I would like to first discuss with MM how
Doxygen headers should exactly look like in C code [C-c C-o not working])

* New(?) (Super)classes for "merging the class structure"
** formner nacopula  c_longNames etc  --> rename to .ac_longNames *and* export
(ac = Archimdean copula)

** DONE new class "Copula" := {copula, nacopula}
* New Wrapper functions or rather extending one or the other function names
** distribution/density/ ... functions
*** DONE dcopula(), pcopula(), rcopula()  (for "nacopula")
*** TODO dCopula(x, cop), pCopula(x, cop), rCopula(n, cop)  {swapping args for "standard R" usage}
*** DONE d*():  allow  log=TRUE and use that in loglikCopula()
** random number generation
MH: MM and I wrote wrappers for the two elliptical copulas (normal, t) and the
Archimedean ones. Can't we include those 'as is'? They are also needed for the
graphical GoF test we introduced and which we want to put in the package anyway.

* Renaming of current "base" functions see ./feature-table.org
 e.g.  calibKendallsTau to iTau

* Deprecation of Old Stuff /  towards more consistency / Cleanup
- with warning
- on help pages
** Notably the NAC Archimedean families are probably uniformly 'better' than
   the "J-I" ones.
*** Write testing code that "proves" this.

** "copula" class:  slot re-definitions
*** 'message' --> 'name' (or ??)
*** 'param.lowbnd' / 'param.upbnd' --- use "interval" as in nacopula

** loglikCopula() --- try(), hidemessages should "go" eventually
** nparam() "wrapper" for  length(.@parameters)
** varPL(): TODO's there
** tauDer() = tau'() and rhoDer() = rho'() -- to get S.Err. for  "itau" and "irho"
*** these are *one* of the things where IJ-archmCopula' are better
** AfunDerGalambos() and similar: Use  list() instead of data.frame() as return value  (?)
** derCdfWrtParamsEvCopula() cannot work (as derAfunWrtParam() has no methods) and is used nowhere

* Documentation etc
- DONE inst/doc/nacopula-pkg.Rnw  -- keep file name, maybe rewrite including
 *Title*  (s/nacopula package/Nested Archimedean Copulas in the copula package/)
- \link{} between  old-copula and old-nacopula  functionality
- small vignette with table of function names providing the same functionality (nacopula / old_copula)


* Miscellaneous functions
** MM, MH: indepTest()  takes a while {ok}, *BUT* cannot be interrupted (quickly enough)
    - shouldn't it {and all other tests} return a (valid) object of class
    "htest" (maybe "htest" in addition to the specific S3 class)?
    --> we would probably not need extra print() methods, and just use print.htest()
** MH: In the long run, I suggest calling functions like f(x, foo=1, bar=2) instead of f(x, 1, 2).
  This makes the code more readable and more error-prone (naming all
  arguments except the first one).
*** DONE For example, the call of fitCopula.ml from within fitCopula.mpl
** DONE MH: @ Jun, Ivan: file R/E.R  only defines E <- exp(1). Reason(MM): work around silly 'CMD check' warnings.
But we should move that to another R/*.R

** mvdc() -- fitMvdc() and generate data from fit -- currently wrong on help page
** makeposdef() -- think of using a version of sfsmisc::posdefify()
** see TODO in  R/tCopula.R :  ndim() utility function; test pos.def.
** tCopula() / normalCopula() allow alternative specification of cor.matrix
   at least for the "un" dispersion structure
** t / normal : allow  "block" dispersion structure {including  fitCopula() working}

*** --> e-mail and example: /u/maechler/R/MM/Pkg-ex/copula/mvdc-ex.R

* Testing: ./tests/  must grow, notably for "Jun-Ivan functions"
** maybe take  ./tests/copula-play.R  as sophisticated role model.

* Former nacopula stuff
(MH?) rtrafo() {and probably htrafo()} --- "fail" (are *wrong*!) for n = 1
(MH) From time to time (well, whenever Marius has.. ;-)) check the .Rd files
    for overlong lines, i.e. apply
      for f in *Rd; do printf '%20s: ' $f ; printf '%4d\n' `maxcol $f` ; done
(MH) cop <- onacopulaL("Frank", list(50, 1:2)); any(rnacopula(100, cop)==Inf)
    maybe use limit copulas also for other families (upper frechet bound)
(MH) design a function that gets an outer nacopula and returns a matrix of
    numbers which correspond to the different sectors; this can be used, e.g.,
    for building a [default] color-matrix for splom2 or for estimation purposes
    etc.
    Note: look at nacPairthetas
(MH) include pairwise estimators for nACs
(MH) write nice little function that provides confidence intervals for tau and lambda's
(MH) Khoudraji d + p + r (see asymCopula.R)
(MH) make function to compute volumes available to all copulas

(MM+MH) FIXME in enacopula (in estimation.R): return an object?
(MM+MH) opower() and GIG --> either produce acopula with parameter *vector*, or
     --- maybe in any case ---
     produce an object of class 'opacopula' ("outer power Archimedean copula")
     which is just 'acopula' with a new show method ("thetabase" at least!),
     possibly a new slot ...
     Longer term: want to *estimate* those correctly [MLE at least].

(MM) add an ASCII-plot for the hierarchical structure;
     Actually, define setAs("nacopula", "dendrogram", ....) and then use
     dendrogram print()ing.
(MM) rtrafo() is now "available" for "t" and "normal" thanks to the Master
     thesis of Yongsheng Wang.  (--> ...../function-gof.R )
     --> implement it, and  write a better wrapper for  gnacopula()/gofCopula()
     MH: Maybe we should provide Rosenblatt's transformation in general?




