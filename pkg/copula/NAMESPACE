## Copyright (C) 2012 Marius Hofert, Ivan Kojadinovic, Martin Maechler, and Jun Yan
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU General Public License as published by the Free Software
## Foundation; either version 3 of the License, or (at your option) any later
## version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
## details.
##
## You should have received a copy of the GNU General Public License along with
## this program; if not, see <http://www.gnu.org/licenses/>.


useDynLib(copula, .registration=TRUE)

## import all we need, but not more..
importFrom("methods", ## incl generics for which we export new methods:
	   coerce, show
	   , callGeneric, as, is, extends, new
	   , getClass, getClassDef, validObject
	   , setClass, setClassUnion, setMethod, setOldClass
	   , setValidity, slot, "slot<-"
	   , signature, representation, prototype)

### Part I: Mainly former copula ###############################################

importFrom("graphics", persp, contour)
importFrom("stats", coef, nobs, vcov)# logLik? - already import from "stats4" for mle2

importFrom("mvtnorm",
            dmvnorm, pmvnorm, rmvnorm,
            dmvt, pmvt, rmvt)

importFrom("Matrix", nearPD)

## FIXME: we would only want importS3MethodsFrom("pspline", predict)
import("pspline")
## S3method(predict, smooth.Pspline)

## importFrom(sn, dmst)
## importFrom(sn, qsn, dsn, psn, dmsn, pmsn)

export(dCopula, pCopula, rCopula)
export(cCopula)
export(dMvdc, pMvdc, rMvdc)
export(tau, rho, tailIndex)
export(iTau, iRho)

## archmCopula methods
export(psi, iPsi, diPsi)

## evCopula methods
export(A, dAdu, An.biv, An)

exportClasses(mvdc)
exportClasses(Copula, copula, ellipCopula, archmCopula, evCopula)
exportClasses(indepCopula)
exportClasses(normalCopula, tCopula)
exportClasses(claytonCopula, frankCopula, gumbelCopula, amhCopula, joeCopula)
exportClasses(galambosCopula, huslerReissCopula, tawnCopula, tevCopula)
exportClasses(plackettCopula)
exportClasses(fgmCopula)

export(mvdc)
export(ellipCopula, archmCopula, evCopula)
export(normalCopula, tCopula)
export(indepCopula)
export(claytonCopula, frankCopula, gumbelCopula, amhCopula, joeCopula)
export(galambosCopula, huslerReissCopula, tawnCopula, tevCopula)
export(plackettCopula)
export(fgmCopula)
## auxiliary functions mainly used for working with elliptical copulas:
export(p2P, P2p, getSigma)

exportMethods(show)
exportMethods(persp, contour)

## empirical copula
export(F.n, C.n, dCn, Cn)# .Fn

## fitting copula
export(loglikCopula, loglikMvdc)
export(fitCopula, fitMvdc)
exportClasses(fittedMV, fitCopula, fitMvdc)

## independence tests
export(indepTestSim, indepTest, multIndepTest,
       serialIndepTestSim, serialIndepTest, multSerialIndepTest,
       dependogram)

## gof tests
export(gofCopula, gofMB, gofPB, gofEVCopula)

## ggraph utils
export(pairwiseCcop, pairwiseIndepTest, pviTest, gpviTest, RSpobs, gofBTstat) # R/ggraph-tools.R
export(pairsColList, pairsRosenblatt, .pairsCond) # R/pairsRosenblatt.R

## other nonparametric tests
export(evTestC, evTestA, evTestK)
export(exchEVTest, exchTest)

## asymmetric copula class testing
exportClasses(asymCopula)
export(asymCopula)
exportClasses(asymExplicitCopula)
export(asymExplicitCopula)

S3method(print, copula)
S3method(print, mvdc)
S3method(print, indepTest)
S3method(print, fitCopula)
S3method(summary, fitCopula)
S3method(print, fitMvdc)
S3method(summary, fitMvdc)
##
S3method(coef, fittedMV)
S3method(nobs, fittedMV)
S3method(vcov, fittedMV)
S3method(logLik, fittedMV)

## pdf device
export(dev.off.pdf)


##_TESTING_
## export(dCdtheta, derPdfWrtParams, dTau, dRho)
## export(dCdu)
## export(ChiPlot, KPlot)
##
## export(fitCopula.repar)
## export(multcomp) ---> R/mult.R


### Part II: Mainly former nacopula ############################################

## Now  'Depend'  on  stats4 and bbmle :
importFrom("stats4", mle)
importMethodsFrom("stats4", coef,confint, logLik, AIC, BIC, plot, profile)

importFrom("gsl", debye_1, debye_2)

importFrom("ADGofTest", ad.test)# really would want the ad.test.statistic() but that's hidden

importFrom("stabledist", dstable)

if(FALSE) {## currently do not "depend" on Rmpfr's correct installation:
## As we use it in "bad cases" polyG(), dsumSibuya(),..:
importFrom("Rmpfr",
	   mpfr, chooseMpfr, chooseMpfr.all,
	   getPrec, roundMpfr, sumBinomMpfr)
## currently needed when Rmpfr is detached, as it influences "numeric" (e.g. in examples testing):
importClassesFrom("Rmpfr",
                  mpfr, atomicVector, array_or_vector, Mnumber)
}

exportClasses("acopula",
              "nacopula", "outer_nacopula",
              "interval", "maybeInterval"
              )

## Generics, functions and acopula - family objects defined in this package
export("copAMH", "copClayton", "copFrank", "copGumbel", "copJoe"
       ,"getAcop"
       ,"cacopula", "dnacopula", "pnacopula", "rnacopula", "rnchild"
       ## estimation
       ## ,"coeffG", "polyG", "polyJ", "signFF"
       ,"initOpt"
       ,"beta.", "betan", "pobs"
       ,"ebeta", "etau", "emde", "dDiag", "edmle", "emle", "enacopula"
       ## goodness-of-fit
       ,"gofTstat", "rtrafo", "htrafo", "gnacopula"
       ## distribution of the radial part for Archimedean copulas
       ,"pacR", "qacR"
       ## Kendall distribution
       ,"K", "Kn", "pK", "qK", "dK", "rK"
       ## misc
       ,"onacopula", "onacopulaL", "nac2list", "nesdepth", rnacModel, nacPairthetas
       ,"polynEval"
       ,"printNacopula"
       ,"interval"
       ,"opower"
       ,"prob"
       ,"nacFrail.time"
       ## Should we provide these in a separate (very small) R package ?
       ,"sinc", "A..Z"
       ,"rstable1"
       ,"retstable", "retstableR"
       ,"dSibuya", "pSibuya", "dsumSibuya", "rSibuya", "rSibuyaR"
       ,"rlog", "rlogR", "rF01Frank", "rF01Joe", "rFFrank", "rFJoe"
       ,"log1mexp"
       ,"polylog", "Bernoulli", "Bernoulli.all"
       ,"Eulerian", "Stirling1", "Stirling2"
       ,"Eulerian.all", "Stirling1.all", "Stirling2.all"
       ,"absdPsiMC"
       ,"setTheta"
       ,"tauAMH", "tauJoe"
       ,"allComp" # <- maybe keep private ?
       ,"safeUroot"
       ,"splom2", "qqplot2"
       )
## Deprecated old names [2012-07-25]:
export(psiDabsMC
       , calibKendallsTau
       , calibSpearmansRho
       , kendallsTau
       , spearmansRho
       , genInv
       , genFun, genFunDer1, genFunDer2
       , Afun
       , AfunDer
       , Anfun
       , beta.hat
       , pcopula, dcopula, rcopula
       , dmvdc, pmvdc, rmvdc
       )

exportMethods(## for both own and "other" generics:
	      "prob",
	      "%in%", "dim",
	      "format", "show"
	      )
